comment    : /;[^\r\n]*/                                                        ;
identifier : /[a-zA-Z_][a-zA-Z0-9_]*([.][a-zA-Z_][a-zA-Z0-9_]*)?/               ;
number     : /[0-9]+([.][0-9]+)?/                                               ;
call       : <identifier> '('<identifier>{1} (',' <identifier>)* ')'            ;
factor     : '(' <lexp> ')'
           | <number>
           | <identifier> ('(' <lexp>{1} (',' <lexp>)* ')')?        ;
term       : <factor> (('*' | '/') <factor>)*                                   ;
lexp       : <term> (('+' | '-') <term>)*                                       ;
generic    : "generic" <identifier>                                             ;
type       : <identifier>                                                       ;
variable   : <identifier> ':' (<generic> | <type>)                              ;
args       : <variable>? (',' <variable>)*                                      ;
body       : <lexp>                                                             ;
procedure  : "expression" <identifier> '(' <args> ')' ':' <type> "->" <body>    ;
generate   : "generate" <identifier> ("for" '(' <type> (',' <type>)*)? ')'      ;
lang       : /^/ <procedure>* <generate>* /$/                                   ;