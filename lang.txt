/* GRAMMAR

arg : <identifier> ':' <identifier>

*/
define tuple<x : f32, y : f32, z : f32> as vec3f where
    constructor(x : f32, y : f32, z : f32) -> {x, y, z}
    constructor(vec3f v) -> {v.x, v.y, v.z}
    operator{+}(vec3f x, vec3f y) -> vec3f(x.x + y.x, ...)

/* GRAMMAR

construct : '{' <expression> (',' <expression>)* '}'
constructor : "constructor" '(' <arg> (',' <arg>)* ')' "->" <construct>
tuple  : "tuple" '<' <arg> (',' <arg>)* '>' "as" <identifier> ("where" <constructor>*)?
define : "define" <tuple>

formula test(f : f32) : f32 -> f + 1.1

/* GRAMMAR

formula : "formula" <identifier> '(' <arg> (',' <arg>)* ')' "->" <expression>

*/